useReducer
----------
Sometimes, you have a more complicated state- for example if it got multiple states,
multiple ways of changing it or dependencies to other states.
 useState() thenoften becomes hard or error prone to use
 useReducer() can be used as a replacement for useState() if you need "more powerful state management"

Understanding useReducer()
--------------------------
const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn)

state -> The state snapshot used in the component re-render/re-evaluation cycle
dispatchFn -> A function that can be used to dispatch a new action (i.e trigger an update of the state)
reducerFn -> (prevState, action) => newState
    A function that is triggered automatically once an action is dispatched (via dispatchFn())
     it receives the latest state snapshot and should return the new, updated state.
initialState -> The initial state
initFn -> A function to set the initial state programmatically.

useState() vs useReducer()
--------------------------
useState()

1. The main state management "tool"
2. Great for independent pieces of state/data
3. Great if state updates are easy and limited to a few kinds of updates

useReducer()
------------
1. Great if you need more power
2. Should be considered if you have related pieces of state/data 
3. Can be helpful if you have more complex state updates

Context Limitations
-------------------
React Context is NOT optimized for high frequency changes!
React Context also shouldn't be used to replace ALL component 
    communications and props

Rules of Hooks
---------------
Only call React Hooks in React functions
    1. React Compopnent functions
    2. Custom Hooks
Only call React Hooks at the Top Level
    1. Don't call them in nested functions
    2. Don't call them in any block statements
+ extra, unofficial Rule for useEffect() : ALWAYS add everything you refer
    to inside of useEffect() as a dependency!
        